var ArithmeticParser=function(e){"use strict";const n=new e.CharSet("."),r=new e.Range("0","9"),t=new e.Sequence([r,new e.Quantifier(n,0,1),new e.Quantifier(r,0)]);class a extends e.Matcher{parse(n){if(n instanceof e.Feed){const e=t.parse(n);return void 0===e?e:parseFloat(e.flat(2).reduce((e,n)=>e+n))}}}const s=new e.CharSet("("),c=new e.CharSet(")");class i extends e.Matcher{parse(n){if(n instanceof e.Feed)return new e.Alternation([new a,new e.Sequence([s,new q,c])]).parse(n)}}const w=new e.CharSet("-");class u extends e.Matcher{parse(n){if(n instanceof e.Feed){const r=new e.Sequence([new e.Quantifier(w,0,1),new i]).parse(n);return"-"===r[0][0]?-r[1]:r[1]}}}const f=new e.CharSet("^");class o extends e.Matcher{parse(n){if(n instanceof e.Feed){const r=new e.Sequence([new u,new e.Quantifier(new e.Sequence([f,new o]),0)]).parse(n),t=r[1][0];return t instanceof Array?r[0]**t[1]:r[0]}}}const S=new e.CharSet("*"),h=new e.CharSet("/");class p extends e.Matcher{parse(n){if(n instanceof e.Feed){const r=new e.Sequence([new o,new e.Quantifier(new e.Sequence([new e.Alternation([S,h]),new p]),0)]).parse(n),t=r[1][0];if(t instanceof Array){if("*"===t[0])return r[0]*t[1];if("/"===t[0])return r[0]/t[1]}return r[0]}}}const d=new e.CharSet("+"),l=new e.CharSet("-");class q extends e.Matcher{parse(n){if(n instanceof e.Feed){const r=new e.Sequence([new p,new e.Quantifier(new e.Sequence([new e.Alternation([d,l]),new q]),0)]).parse(n),t=r[1][0];if(t instanceof Array){if("-"===t[0])return r[0]-t[1];if("+"===t[0])return r[0]+t[1]}return r[0]}}}return class extends e.Matcher{parse(e){return(new q).parse(e)}}}(parexgramJs);